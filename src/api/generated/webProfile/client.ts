/**
 * Do not edit this file it is auto-generated by io-utils / gen-api-models.
 * See https://github.com/pagopa/io-utils
 */
/* eslint-disable  */

import { withoutUndefinedValues } from "@pagopa/ts-commons/lib/types";
import {
  RequestParams,
  TypeofApiCall,
  TypeofApiParams,
  createFetchRequestForApi,
  ReplaceRequestParams
} from "@pagopa/ts-commons/lib/requests";
import { identity } from "fp-ts/lib/function";

import {
  GetApplicationInfoT,
  getApplicationInfoDefaultDecoder,
  GetServiceStatusT,
  getServiceStatusDefaultDecoder,
  LockUserSessionT,
  lockUserSessionDefaultDecoder,
  UnlockUserSessionT,
  unlockUserSessionDefaultDecoder,
  LogoutFromIOAppT,
  logoutFromIOAppDefaultDecoder,
  GetSessionsListT,
  getSessionsListDefaultDecoder,
  GetProfileT,
  getProfileDefaultDecoder,
  GetUserSessionStateT,
  getUserSessionStateDefaultDecoder,
  ExchangeTokenT,
  exchangeTokenDefaultDecoder
} from "./requestTypes";

// This is a placeholder for undefined when dealing with object keys
// Typescript doesn't perform well when narrowing a union type which includes string and undefined
// (example: "foo" | "bar" | undefined)
// We use this as a placeholder for type parameters indicating "no key"
type __UNDEFINED_KEY = "_____";

export type ApiOperation = TypeofApiCall<GetApplicationInfoT> &
  TypeofApiCall<GetServiceStatusT> &
  TypeofApiCall<LockUserSessionT> &
  TypeofApiCall<UnlockUserSessionT> &
  TypeofApiCall<LogoutFromIOAppT> &
  TypeofApiCall<GetSessionsListT> &
  TypeofApiCall<GetProfileT> &
  TypeofApiCall<GetUserSessionStateT> &
  TypeofApiCall<ExchangeTokenT>;

export type ParamKeys = keyof (TypeofApiParams<GetApplicationInfoT> &
  TypeofApiParams<GetServiceStatusT> &
  TypeofApiParams<LockUserSessionT> &
  TypeofApiParams<UnlockUserSessionT> &
  TypeofApiParams<LogoutFromIOAppT> &
  TypeofApiParams<GetSessionsListT> &
  TypeofApiParams<GetProfileT> &
  TypeofApiParams<GetUserSessionStateT> &
  TypeofApiParams<ExchangeTokenT>);

/**
 * Defines an adapter for TypeofApiCall which omit one or more parameters in the signature
 * @param ApiT the type which defines the operation to expose
 * @param K the parameter to omit. undefined means no parameters will be omitted
 */
export type OmitApiCallParams<
  ApiT,
  K extends ParamKeys | __UNDEFINED_KEY = __UNDEFINED_KEY
> = (
  op: TypeofApiCall<ApiT>
) => K extends __UNDEFINED_KEY
  ? TypeofApiCall<ApiT>
  : TypeofApiCall<ReplaceRequestParams<ApiT, Omit<RequestParams<ApiT>, K>>>;

/**
 * Defines an adapter for TypeofApiCall which omit one or more parameters in the signature
 * @param ApiT the type which defines the operation to expose
 * @param K the parameter to omit. undefined means no parameters will be omitted
 */
export type WithDefaultsT<
  K extends ParamKeys | __UNDEFINED_KEY = __UNDEFINED_KEY
> = OmitApiCallParams<
  | GetApplicationInfoT
  | GetServiceStatusT
  | LockUserSessionT
  | UnlockUserSessionT
  | LogoutFromIOAppT
  | GetSessionsListT
  | GetProfileT
  | GetUserSessionStateT
  | ExchangeTokenT,
  K
>;

/**
 * Defines a collection of api operations
 * @param K name of the parameters that the Clients masks from the operations
 */
export type Client<
  K extends ParamKeys | __UNDEFINED_KEY = __UNDEFINED_KEY
> = K extends __UNDEFINED_KEY
  ? {
      readonly getApplicationInfo: TypeofApiCall<GetApplicationInfoT>;

      readonly getServiceStatus: TypeofApiCall<GetServiceStatusT>;

      readonly lockUserSession: TypeofApiCall<LockUserSessionT>;

      readonly unlockUserSession: TypeofApiCall<UnlockUserSessionT>;

      readonly logoutFromIOApp: TypeofApiCall<LogoutFromIOAppT>;

      readonly getSessionsList: TypeofApiCall<GetSessionsListT>;

      readonly getProfile: TypeofApiCall<GetProfileT>;

      readonly getUserSessionState: TypeofApiCall<GetUserSessionStateT>;

      readonly exchangeToken: TypeofApiCall<ExchangeTokenT>;
    }
  : {
      readonly getApplicationInfo: TypeofApiCall<
        ReplaceRequestParams<
          GetApplicationInfoT,
          Omit<RequestParams<GetApplicationInfoT>, K>
        >
      >;

      readonly getServiceStatus: TypeofApiCall<
        ReplaceRequestParams<
          GetServiceStatusT,
          Omit<RequestParams<GetServiceStatusT>, K>
        >
      >;

      readonly lockUserSession: TypeofApiCall<
        ReplaceRequestParams<
          LockUserSessionT,
          Omit<RequestParams<LockUserSessionT>, K>
        >
      >;

      readonly unlockUserSession: TypeofApiCall<
        ReplaceRequestParams<
          UnlockUserSessionT,
          Omit<RequestParams<UnlockUserSessionT>, K>
        >
      >;

      readonly logoutFromIOApp: TypeofApiCall<
        ReplaceRequestParams<
          LogoutFromIOAppT,
          Omit<RequestParams<LogoutFromIOAppT>, K>
        >
      >;

      readonly getSessionsList: TypeofApiCall<
        ReplaceRequestParams<
          GetSessionsListT,
          Omit<RequestParams<GetSessionsListT>, K>
        >
      >;

      readonly getProfile: TypeofApiCall<
        ReplaceRequestParams<GetProfileT, Omit<RequestParams<GetProfileT>, K>>
      >;

      readonly getUserSessionState: TypeofApiCall<
        ReplaceRequestParams<
          GetUserSessionStateT,
          Omit<RequestParams<GetUserSessionStateT>, K>
        >
      >;

      readonly exchangeToken: TypeofApiCall<
        ReplaceRequestParams<
          ExchangeTokenT,
          Omit<RequestParams<ExchangeTokenT>, K>
        >
      >;
    };

/**
 * Create an instance of a client
 * @param params hash map of parameters thata define the client:
 *  - baseUrl: the base url for every api call (required)
 *  - fetchApi: an implementation of the fetch() web API, depending on the platform (required)
 *  - basePath: optional path to be appended to the baseUrl
 *  - withDefaults: optional adapter to be applied to every operation, to omit some paramenters
 * @returns a collection of api operations
 */
export function createClient<K extends ParamKeys>(params: {
  baseUrl: string;
  // eslint-disable-next-line @typescript-eslint/no-explicit-any
  fetchApi: typeof fetch;
  withDefaults: WithDefaultsT<K>;
  basePath?: string;
}): Client<K>;
export function createClient(params: {
  baseUrl: string;
  // eslint-disable-next-line @typescript-eslint/no-explicit-any
  fetchApi: typeof fetch;
  withDefaults?: undefined;
  basePath?: string;
}): Client;
export function createClient<K extends ParamKeys>({
  baseUrl,
  // eslint-disable-next-line @typescript-eslint/no-explicit-any
  fetchApi,
  withDefaults,
  basePath = "/"
}: {
  baseUrl: string;
  // eslint-disable-next-line @typescript-eslint/no-explicit-any
  fetchApi: typeof fetch;
  withDefaults?: WithDefaultsT<K>;
  basePath?: string;
}) {
  const options = {
    baseUrl,
    fetchApi
  };

  const getApplicationInfoT: ReplaceRequestParams<
    GetApplicationInfoT,
    RequestParams<GetApplicationInfoT>
  > = {
    method: "get",

    headers: () => ({}),

    response_decoder: getApplicationInfoDefaultDecoder(),
    url: ({}) => `${basePath}/info`,

    query: () => withoutUndefinedValues({})
  };
  const getApplicationInfo: TypeofApiCall<GetApplicationInfoT> = createFetchRequestForApi(
    getApplicationInfoT,
    options
  );

  const getServiceStatusT: ReplaceRequestParams<
    GetServiceStatusT,
    RequestParams<GetServiceStatusT>
  > = {
    method: "get",

    headers: ({ ["bearerAuth"]: bearerAuth }) => ({
      Authorization: `Bearer ${bearerAuth}`
    }),
    response_decoder: getServiceStatusDefaultDecoder(),
    url: ({}) => `${basePath}/ping`,

    query: () => withoutUndefinedValues({})
  };
  const getServiceStatus: TypeofApiCall<GetServiceStatusT> = createFetchRequestForApi(
    getServiceStatusT,
    options
  );

  const lockUserSessionT: ReplaceRequestParams<
    LockUserSessionT,
    RequestParams<LockUserSessionT>
  > = {
    method: "post",

    headers: ({ ["bearerAuth"]: bearerAuth }) => ({
      Authorization: `Bearer ${bearerAuth}`,

      "Content-Type": "application/json"
    }),
    response_decoder: lockUserSessionDefaultDecoder(),
    url: ({}) => `${basePath}/lock-session`,

    body: () => "{}",

    query: () => withoutUndefinedValues({})
  };
  const lockUserSession: TypeofApiCall<LockUserSessionT> = createFetchRequestForApi(
    lockUserSessionT,
    options
  );

  const unlockUserSessionT: ReplaceRequestParams<
    UnlockUserSessionT,
    RequestParams<UnlockUserSessionT>
  > = {
    method: "delete",

    headers: ({ ["bearerAuth"]: bearerAuth }) => ({
      Authorization: `Bearer ${bearerAuth}`,

      "Content-Type": "application/json"
    }),
    response_decoder: unlockUserSessionDefaultDecoder(),
    url: ({}) => `${basePath}/unlock-session`,

    query: () => withoutUndefinedValues({})
  };
  const unlockUserSession: TypeofApiCall<UnlockUserSessionT> = createFetchRequestForApi(
    unlockUserSessionT,
    options
  );

  const logoutFromIOAppT: ReplaceRequestParams<
    LogoutFromIOAppT,
    RequestParams<LogoutFromIOAppT>
  > = {
    method: "post",

    headers: ({ ["bearerAuth"]: bearerAuth }) => ({
      Authorization: `Bearer ${bearerAuth}`,

      "Content-Type": "application/json"
    }),
    response_decoder: logoutFromIOAppDefaultDecoder(),
    url: ({}) => `${basePath}/logout`,

    body: () => "{}",

    query: () => withoutUndefinedValues({})
  };
  const logoutFromIOApp: TypeofApiCall<LogoutFromIOAppT> = createFetchRequestForApi(
    logoutFromIOAppT,
    options
  );

  const getSessionsListT: ReplaceRequestParams<
    GetSessionsListT,
    RequestParams<GetSessionsListT>
  > = {
    method: "get",

    headers: ({ ["bearerAuth"]: bearerAuth }) => ({
      Authorization: `Bearer ${bearerAuth}`
    }),
    response_decoder: getSessionsListDefaultDecoder(),
    url: ({}) => `${basePath}/sessions`,

    query: () => withoutUndefinedValues({})
  };
  const getSessionsList: TypeofApiCall<GetSessionsListT> = createFetchRequestForApi(
    getSessionsListT,
    options
  );

  const getProfileT: ReplaceRequestParams<
    GetProfileT,
    RequestParams<GetProfileT>
  > = {
    method: "get",

    headers: ({ ["bearerAuth"]: bearerAuth }) => ({
      Authorization: `Bearer ${bearerAuth}`
    }),
    response_decoder: getProfileDefaultDecoder(),
    url: ({}) => `${basePath}/profile`,

    query: () => withoutUndefinedValues({})
  };
  const getProfile: TypeofApiCall<GetProfileT> = createFetchRequestForApi(
    getProfileT,
    options
  );

  const getUserSessionStateT: ReplaceRequestParams<
    GetUserSessionStateT,
    RequestParams<GetUserSessionStateT>
  > = {
    method: "post",

    headers: ({ ["bearerAuth"]: bearerAuth }) => ({
      Authorization: `Bearer ${bearerAuth}`,

      "Content-Type": "application/json"
    }),
    response_decoder: getUserSessionStateDefaultDecoder(),
    url: ({}) => `${basePath}/session-state`,

    body: () => "{}",

    query: () => withoutUndefinedValues({})
  };
  const getUserSessionState: TypeofApiCall<GetUserSessionStateT> = createFetchRequestForApi(
    getUserSessionStateT,
    options
  );

  const exchangeTokenT: ReplaceRequestParams<
    ExchangeTokenT,
    RequestParams<ExchangeTokenT>
  > = {
    method: "post",

    headers: ({ ["bearerAuth"]: bearerAuth }) => ({
      Authorization: `Bearer ${bearerAuth}`,

      "Content-Type": "application/json"
    }),
    response_decoder: exchangeTokenDefaultDecoder(),
    url: ({}) => `${basePath}/exchange`,

    body: () => "{}",

    query: () => withoutUndefinedValues({})
  };
  const exchangeToken: TypeofApiCall<ExchangeTokenT> = createFetchRequestForApi(
    exchangeTokenT,
    options
  );

  return {
    getApplicationInfo: (withDefaults || identity)(getApplicationInfo),
    getServiceStatus: (withDefaults || identity)(getServiceStatus),
    lockUserSession: (withDefaults || identity)(lockUserSession),
    unlockUserSession: (withDefaults || identity)(unlockUserSession),
    logoutFromIOApp: (withDefaults || identity)(logoutFromIOApp),
    getSessionsList: (withDefaults || identity)(getSessionsList),
    getProfile: (withDefaults || identity)(getProfile),
    getUserSessionState: (withDefaults || identity)(getUserSessionState),
    exchangeToken: (withDefaults || identity)(exchangeToken)
  };
}
