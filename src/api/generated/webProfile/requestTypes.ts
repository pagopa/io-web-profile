// DO NOT EDIT THIS FILE
// This file has been generated by gen-api-models
// eslint-disable sonar/max-union-size
// eslint-disable sonarjs/no-identical-functions

import * as t from "io-ts";

import * as r from "@pagopa/ts-commons/lib/requests";

import { ServiceStatus } from "./ServiceStatus";

import { LockSessionData } from "./LockSessionData";

import { BadRequest } from "./BadRequest";

import { Unauthorized } from "./Unauthorized";

import { InternalServerError } from "./InternalServerError";

import { UnlockSessionData } from "./UnlockSessionData";

import { ProfileData } from "./ProfileData";

import { ProblemJson } from "./ProblemJson";

import { SessionState } from "./SessionState";

import { ExchangeToken } from "./ExchangeToken";

/****************************************************************
 * getServiceStatus
 */

// Request type definition
export type GetServiceStatusT = r.IGetApiRequestType<
  { readonly bearerAuth: string },
  "Authorization",
  never,
  r.IResponseType<200, ServiceStatus, never>
>;

export const getServiceStatusDefaultResponses = {
  200: ServiceStatus
};

export type GetServiceStatusResponsesT<
  A0 = ServiceStatus,
  C0 = ServiceStatus
> = {
  200: t.Type<A0, C0>;
};

export function getServiceStatusDecoder<A0 = ServiceStatus, C0 = ServiceStatus>(
  overrideTypes:
    | Partial<GetServiceStatusResponsesT<A0, C0>>
    | t.Type<A0, C0>
    | undefined = {}
): r.ResponseDecoder<r.IResponseType<200, A0, never>> {
  const isDecoder = (d: any): d is t.Type<A0, C0> =>
    typeof d["_A"] !== "undefined";

  const type = {
    ...((getServiceStatusDefaultResponses as unknown) as GetServiceStatusResponsesT<
      A0,
      C0
    >),
    ...(isDecoder(overrideTypes) ? { 200: overrideTypes } : overrideTypes)
  };

  const d200 = (type[200].name === "undefined"
    ? r.constantResponseDecoder<undefined, 200, never>(200, undefined)
    : r.ioResponseDecoder<
        200,
        typeof type[200]["_A"],
        typeof type[200]["_O"],
        never
      >(200, type[200])) as r.ResponseDecoder<r.IResponseType<200, A0, never>>;

  return d200;
}

// Decodes the success response with the type defined in the specs
export const getServiceStatusDefaultDecoder = () => getServiceStatusDecoder();

/****************************************************************
 * lockUserSession
 */

// Request type definition
export type LockUserSessionT = r.IPostApiRequestType<
  {
    readonly bearerAuth: string;
    readonly body?: LockSessionData | ReadableStream<Uint8Array> | Buffer;
  },
  "Content-Type" | "Authorization",
  never,
  | r.IResponseType<204, undefined, never>
  | r.IResponseType<400, BadRequest, never>
  | r.IResponseType<401, Unauthorized, never>
  | r.IResponseType<403, undefined, never>
  | r.IResponseType<409, undefined, never>
  | r.IResponseType<500, InternalServerError, never>
  | r.IResponseType<502, undefined, never>
  | r.IResponseType<504, undefined, never>
>;

export const lockUserSessionDefaultResponses = {
  204: t.undefined,
  400: BadRequest,
  401: Unauthorized,
  403: t.undefined,
  409: t.undefined,
  500: InternalServerError,
  502: t.undefined,
  504: t.undefined
};

export type LockUserSessionResponsesT<
  A0 = undefined,
  C0 = undefined,
  A1 = BadRequest,
  C1 = BadRequest,
  A2 = Unauthorized,
  C2 = Unauthorized,
  A3 = undefined,
  C3 = undefined,
  A4 = undefined,
  C4 = undefined,
  A5 = InternalServerError,
  C5 = InternalServerError,
  A6 = undefined,
  C6 = undefined,
  A7 = undefined,
  C7 = undefined
> = {
  204: t.Type<A0, C0>;
  400: t.Type<A1, C1>;
  401: t.Type<A2, C2>;
  403: t.Type<A3, C3>;
  409: t.Type<A4, C4>;
  500: t.Type<A5, C5>;
  502: t.Type<A6, C6>;
  504: t.Type<A7, C7>;
};

export function lockUserSessionDecoder<
  A0 = undefined,
  C0 = undefined,
  A1 = BadRequest,
  C1 = BadRequest,
  A2 = Unauthorized,
  C2 = Unauthorized,
  A3 = undefined,
  C3 = undefined,
  A4 = undefined,
  C4 = undefined,
  A5 = InternalServerError,
  C5 = InternalServerError,
  A6 = undefined,
  C6 = undefined,
  A7 = undefined,
  C7 = undefined
>(
  overrideTypes:
    | Partial<
        LockUserSessionResponsesT<
          A0,
          C0,
          A1,
          C1,
          A2,
          C2,
          A3,
          C3,
          A4,
          C4,
          A5,
          C5,
          A6,
          C6,
          A7,
          C7
        >
      >
    | t.Type<A0, C0>
    | undefined = {}
): r.ResponseDecoder<
  | r.IResponseType<204, A0, never>
  | r.IResponseType<400, A1, never>
  | r.IResponseType<401, A2, never>
  | r.IResponseType<403, A3, never>
  | r.IResponseType<409, A4, never>
  | r.IResponseType<500, A5, never>
  | r.IResponseType<502, A6, never>
  | r.IResponseType<504, A7, never>
> {
  const isDecoder = (d: any): d is t.Type<A0, C0> =>
    typeof d["_A"] !== "undefined";

  const type = {
    ...((lockUserSessionDefaultResponses as unknown) as LockUserSessionResponsesT<
      A0,
      C0,
      A1,
      C1,
      A2,
      C2,
      A3,
      C3,
      A4,
      C4,
      A5,
      C5,
      A6,
      C6,
      A7,
      C7
    >),
    ...(isDecoder(overrideTypes) ? { 204: overrideTypes } : overrideTypes)
  };

  const d204 = (type[204].name === "undefined"
    ? r.constantResponseDecoder<undefined, 204, never>(204, undefined)
    : r.ioResponseDecoder<
        204,
        typeof type[204]["_A"],
        typeof type[204]["_O"],
        never
      >(204, type[204])) as r.ResponseDecoder<r.IResponseType<204, A0, never>>;

  const d400 = (type[400].name === "undefined"
    ? r.constantResponseDecoder<undefined, 400, never>(400, undefined)
    : r.ioResponseDecoder<
        400,
        typeof type[400]["_A"],
        typeof type[400]["_O"],
        never
      >(400, type[400])) as r.ResponseDecoder<r.IResponseType<400, A1, never>>;

  const d401 = (type[401].name === "undefined"
    ? r.constantResponseDecoder<undefined, 401, never>(401, undefined)
    : r.ioResponseDecoder<
        401,
        typeof type[401]["_A"],
        typeof type[401]["_O"],
        never
      >(401, type[401])) as r.ResponseDecoder<r.IResponseType<401, A2, never>>;

  const d403 = (type[403].name === "undefined"
    ? r.constantResponseDecoder<undefined, 403, never>(403, undefined)
    : r.ioResponseDecoder<
        403,
        typeof type[403]["_A"],
        typeof type[403]["_O"],
        never
      >(403, type[403])) as r.ResponseDecoder<r.IResponseType<403, A3, never>>;

  const d409 = (type[409].name === "undefined"
    ? r.constantResponseDecoder<undefined, 409, never>(409, undefined)
    : r.ioResponseDecoder<
        409,
        typeof type[409]["_A"],
        typeof type[409]["_O"],
        never
      >(409, type[409])) as r.ResponseDecoder<r.IResponseType<409, A4, never>>;

  const d500 = (type[500].name === "undefined"
    ? r.constantResponseDecoder<undefined, 500, never>(500, undefined)
    : r.ioResponseDecoder<
        500,
        typeof type[500]["_A"],
        typeof type[500]["_O"],
        never
      >(500, type[500])) as r.ResponseDecoder<r.IResponseType<500, A5, never>>;

  const d502 = (type[502].name === "undefined"
    ? r.constantResponseDecoder<undefined, 502, never>(502, undefined)
    : r.ioResponseDecoder<
        502,
        typeof type[502]["_A"],
        typeof type[502]["_O"],
        never
      >(502, type[502])) as r.ResponseDecoder<r.IResponseType<502, A6, never>>;

  const d504 = (type[504].name === "undefined"
    ? r.constantResponseDecoder<undefined, 504, never>(504, undefined)
    : r.ioResponseDecoder<
        504,
        typeof type[504]["_A"],
        typeof type[504]["_O"],
        never
      >(504, type[504])) as r.ResponseDecoder<r.IResponseType<504, A7, never>>;

  return r.composeResponseDecoders(
    r.composeResponseDecoders(
      r.composeResponseDecoders(
        r.composeResponseDecoders(
          r.composeResponseDecoders(
            r.composeResponseDecoders(
              r.composeResponseDecoders(d204, d400),
              d401
            ),
            d403
          ),
          d409
        ),
        d500
      ),
      d502
    ),
    d504
  );
}

// Decodes the success response with the type defined in the specs
export const lockUserSessionDefaultDecoder = () => lockUserSessionDecoder();

/****************************************************************
 * unlockUserSession
 */

// Request type definition
export type UnlockUserSessionT = r.IPostApiRequestType<
  {
    readonly bearerAuth: string;
    readonly body?: UnlockSessionData | ReadableStream<Uint8Array> | Buffer;
  },
  "Content-Type" | "Authorization",
  never,
  | r.IResponseType<200, undefined, never>
  | r.IResponseType<400, BadRequest, never>
  | r.IResponseType<401, Unauthorized, never>
  | r.IResponseType<403, undefined, never>
  | r.IResponseType<409, undefined, never>
  | r.IResponseType<500, InternalServerError, never>
  | r.IResponseType<502, undefined, never>
  | r.IResponseType<504, undefined, never>
>;

export const unlockUserSessionDefaultResponses = {
  200: t.undefined,
  400: BadRequest,
  401: Unauthorized,
  403: t.undefined,
  409: t.undefined,
  500: InternalServerError,
  502: t.undefined,
  504: t.undefined
};

export type UnlockUserSessionResponsesT<
  A0 = undefined,
  C0 = undefined,
  A1 = BadRequest,
  C1 = BadRequest,
  A2 = Unauthorized,
  C2 = Unauthorized,
  A3 = undefined,
  C3 = undefined,
  A4 = undefined,
  C4 = undefined,
  A5 = InternalServerError,
  C5 = InternalServerError,
  A6 = undefined,
  C6 = undefined,
  A7 = undefined,
  C7 = undefined
> = {
  200: t.Type<A0, C0>;
  400: t.Type<A1, C1>;
  401: t.Type<A2, C2>;
  403: t.Type<A3, C3>;
  409: t.Type<A4, C4>;
  500: t.Type<A5, C5>;
  502: t.Type<A6, C6>;
  504: t.Type<A7, C7>;
};

export function unlockUserSessionDecoder<
  A0 = undefined,
  C0 = undefined,
  A1 = BadRequest,
  C1 = BadRequest,
  A2 = Unauthorized,
  C2 = Unauthorized,
  A3 = undefined,
  C3 = undefined,
  A4 = undefined,
  C4 = undefined,
  A5 = InternalServerError,
  C5 = InternalServerError,
  A6 = undefined,
  C6 = undefined,
  A7 = undefined,
  C7 = undefined
>(
  overrideTypes:
    | Partial<
        UnlockUserSessionResponsesT<
          A0,
          C0,
          A1,
          C1,
          A2,
          C2,
          A3,
          C3,
          A4,
          C4,
          A5,
          C5,
          A6,
          C6,
          A7,
          C7
        >
      >
    | t.Type<A0, C0>
    | undefined = {}
): r.ResponseDecoder<
  | r.IResponseType<200, A0, never>
  | r.IResponseType<400, A1, never>
  | r.IResponseType<401, A2, never>
  | r.IResponseType<403, A3, never>
  | r.IResponseType<409, A4, never>
  | r.IResponseType<500, A5, never>
  | r.IResponseType<502, A6, never>
  | r.IResponseType<504, A7, never>
> {
  const isDecoder = (d: any): d is t.Type<A0, C0> =>
    typeof d["_A"] !== "undefined";

  const type = {
    ...((unlockUserSessionDefaultResponses as unknown) as UnlockUserSessionResponsesT<
      A0,
      C0,
      A1,
      C1,
      A2,
      C2,
      A3,
      C3,
      A4,
      C4,
      A5,
      C5,
      A6,
      C6,
      A7,
      C7
    >),
    ...(isDecoder(overrideTypes) ? { 200: overrideTypes } : overrideTypes)
  };

  const d200 = (type[200].name === "undefined"
    ? r.constantResponseDecoder<undefined, 200, never>(200, undefined)
    : r.ioResponseDecoder<
        200,
        typeof type[200]["_A"],
        typeof type[200]["_O"],
        never
      >(200, type[200])) as r.ResponseDecoder<r.IResponseType<200, A0, never>>;

  const d400 = (type[400].name === "undefined"
    ? r.constantResponseDecoder<undefined, 400, never>(400, undefined)
    : r.ioResponseDecoder<
        400,
        typeof type[400]["_A"],
        typeof type[400]["_O"],
        never
      >(400, type[400])) as r.ResponseDecoder<r.IResponseType<400, A1, never>>;

  const d401 = (type[401].name === "undefined"
    ? r.constantResponseDecoder<undefined, 401, never>(401, undefined)
    : r.ioResponseDecoder<
        401,
        typeof type[401]["_A"],
        typeof type[401]["_O"],
        never
      >(401, type[401])) as r.ResponseDecoder<r.IResponseType<401, A2, never>>;

  const d403 = (type[403].name === "undefined"
    ? r.constantResponseDecoder<undefined, 403, never>(403, undefined)
    : r.ioResponseDecoder<
        403,
        typeof type[403]["_A"],
        typeof type[403]["_O"],
        never
      >(403, type[403])) as r.ResponseDecoder<r.IResponseType<403, A3, never>>;

  const d409 = (type[409].name === "undefined"
    ? r.constantResponseDecoder<undefined, 409, never>(409, undefined)
    : r.ioResponseDecoder<
        409,
        typeof type[409]["_A"],
        typeof type[409]["_O"],
        never
      >(409, type[409])) as r.ResponseDecoder<r.IResponseType<409, A4, never>>;

  const d500 = (type[500].name === "undefined"
    ? r.constantResponseDecoder<undefined, 500, never>(500, undefined)
    : r.ioResponseDecoder<
        500,
        typeof type[500]["_A"],
        typeof type[500]["_O"],
        never
      >(500, type[500])) as r.ResponseDecoder<r.IResponseType<500, A5, never>>;

  const d502 = (type[502].name === "undefined"
    ? r.constantResponseDecoder<undefined, 502, never>(502, undefined)
    : r.ioResponseDecoder<
        502,
        typeof type[502]["_A"],
        typeof type[502]["_O"],
        never
      >(502, type[502])) as r.ResponseDecoder<r.IResponseType<502, A6, never>>;

  const d504 = (type[504].name === "undefined"
    ? r.constantResponseDecoder<undefined, 504, never>(504, undefined)
    : r.ioResponseDecoder<
        504,
        typeof type[504]["_A"],
        typeof type[504]["_O"],
        never
      >(504, type[504])) as r.ResponseDecoder<r.IResponseType<504, A7, never>>;

  return r.composeResponseDecoders(
    r.composeResponseDecoders(
      r.composeResponseDecoders(
        r.composeResponseDecoders(
          r.composeResponseDecoders(
            r.composeResponseDecoders(
              r.composeResponseDecoders(d200, d400),
              d401
            ),
            d403
          ),
          d409
        ),
        d500
      ),
      d502
    ),
    d504
  );
}

// Decodes the success response with the type defined in the specs
export const unlockUserSessionDefaultDecoder = () => unlockUserSessionDecoder();

/****************************************************************
 * logoutFromIOApp
 */

// Request type definition
export type LogoutFromIOAppT = r.IPostApiRequestType<
  { readonly bearerAuth: string },
  "Authorization",
  never,
  | r.IResponseType<200, undefined, never>
  | r.IResponseType<400, BadRequest, never>
  | r.IResponseType<401, Unauthorized, never>
  | r.IResponseType<500, InternalServerError, never>
  | r.IResponseType<502, undefined, never>
  | r.IResponseType<504, undefined, never>
>;

export const logoutFromIOAppDefaultResponses = {
  200: t.undefined,
  400: BadRequest,
  401: Unauthorized,
  500: InternalServerError,
  502: t.undefined,
  504: t.undefined
};

export type LogoutFromIOAppResponsesT<
  A0 = undefined,
  C0 = undefined,
  A1 = BadRequest,
  C1 = BadRequest,
  A2 = Unauthorized,
  C2 = Unauthorized,
  A3 = InternalServerError,
  C3 = InternalServerError,
  A4 = undefined,
  C4 = undefined,
  A5 = undefined,
  C5 = undefined
> = {
  200: t.Type<A0, C0>;
  400: t.Type<A1, C1>;
  401: t.Type<A2, C2>;
  500: t.Type<A3, C3>;
  502: t.Type<A4, C4>;
  504: t.Type<A5, C5>;
};

export function logoutFromIOAppDecoder<
  A0 = undefined,
  C0 = undefined,
  A1 = BadRequest,
  C1 = BadRequest,
  A2 = Unauthorized,
  C2 = Unauthorized,
  A3 = InternalServerError,
  C3 = InternalServerError,
  A4 = undefined,
  C4 = undefined,
  A5 = undefined,
  C5 = undefined
>(
  overrideTypes:
    | Partial<
        LogoutFromIOAppResponsesT<
          A0,
          C0,
          A1,
          C1,
          A2,
          C2,
          A3,
          C3,
          A4,
          C4,
          A5,
          C5
        >
      >
    | t.Type<A0, C0>
    | undefined = {}
): r.ResponseDecoder<
  | r.IResponseType<200, A0, never>
  | r.IResponseType<400, A1, never>
  | r.IResponseType<401, A2, never>
  | r.IResponseType<500, A3, never>
  | r.IResponseType<502, A4, never>
  | r.IResponseType<504, A5, never>
> {
  const isDecoder = (d: any): d is t.Type<A0, C0> =>
    typeof d["_A"] !== "undefined";

  const type = {
    ...((logoutFromIOAppDefaultResponses as unknown) as LogoutFromIOAppResponsesT<
      A0,
      C0,
      A1,
      C1,
      A2,
      C2,
      A3,
      C3,
      A4,
      C4,
      A5,
      C5
    >),
    ...(isDecoder(overrideTypes) ? { 200: overrideTypes } : overrideTypes)
  };

  const d200 = (type[200].name === "undefined"
    ? r.constantResponseDecoder<undefined, 200, never>(200, undefined)
    : r.ioResponseDecoder<
        200,
        typeof type[200]["_A"],
        typeof type[200]["_O"],
        never
      >(200, type[200])) as r.ResponseDecoder<r.IResponseType<200, A0, never>>;

  const d400 = (type[400].name === "undefined"
    ? r.constantResponseDecoder<undefined, 400, never>(400, undefined)
    : r.ioResponseDecoder<
        400,
        typeof type[400]["_A"],
        typeof type[400]["_O"],
        never
      >(400, type[400])) as r.ResponseDecoder<r.IResponseType<400, A1, never>>;

  const d401 = (type[401].name === "undefined"
    ? r.constantResponseDecoder<undefined, 401, never>(401, undefined)
    : r.ioResponseDecoder<
        401,
        typeof type[401]["_A"],
        typeof type[401]["_O"],
        never
      >(401, type[401])) as r.ResponseDecoder<r.IResponseType<401, A2, never>>;

  const d500 = (type[500].name === "undefined"
    ? r.constantResponseDecoder<undefined, 500, never>(500, undefined)
    : r.ioResponseDecoder<
        500,
        typeof type[500]["_A"],
        typeof type[500]["_O"],
        never
      >(500, type[500])) as r.ResponseDecoder<r.IResponseType<500, A3, never>>;

  const d502 = (type[502].name === "undefined"
    ? r.constantResponseDecoder<undefined, 502, never>(502, undefined)
    : r.ioResponseDecoder<
        502,
        typeof type[502]["_A"],
        typeof type[502]["_O"],
        never
      >(502, type[502])) as r.ResponseDecoder<r.IResponseType<502, A4, never>>;

  const d504 = (type[504].name === "undefined"
    ? r.constantResponseDecoder<undefined, 504, never>(504, undefined)
    : r.ioResponseDecoder<
        504,
        typeof type[504]["_A"],
        typeof type[504]["_O"],
        never
      >(504, type[504])) as r.ResponseDecoder<r.IResponseType<504, A5, never>>;

  return r.composeResponseDecoders(
    r.composeResponseDecoders(
      r.composeResponseDecoders(
        r.composeResponseDecoders(r.composeResponseDecoders(d200, d400), d401),
        d500
      ),
      d502
    ),
    d504
  );
}

// Decodes the success response with the type defined in the specs
export const logoutFromIOAppDefaultDecoder = () => logoutFromIOAppDecoder();

/****************************************************************
 * getProfile
 */

// Request type definition
export type GetProfileT = r.IGetApiRequestType<
  { readonly bearerAuth: string },
  "Authorization",
  never,
  | r.IResponseType<200, ProfileData, never>
  | r.IResponseType<400, BadRequest, never>
  | r.IResponseType<401, Unauthorized, never>
  | r.IResponseType<403, undefined, never>
  | r.IResponseType<404, ProblemJson, never>
  | r.IResponseType<429, undefined, never>
  | r.IResponseType<500, InternalServerError, never>
>;

export const getProfileDefaultResponses = {
  200: ProfileData,
  400: BadRequest,
  401: Unauthorized,
  403: t.undefined,
  404: ProblemJson,
  429: t.undefined,
  500: InternalServerError
};

export type GetProfileResponsesT<
  A0 = ProfileData,
  C0 = ProfileData,
  A1 = BadRequest,
  C1 = BadRequest,
  A2 = Unauthorized,
  C2 = Unauthorized,
  A3 = undefined,
  C3 = undefined,
  A4 = ProblemJson,
  C4 = ProblemJson,
  A5 = undefined,
  C5 = undefined,
  A6 = InternalServerError,
  C6 = InternalServerError
> = {
  200: t.Type<A0, C0>;
  400: t.Type<A1, C1>;
  401: t.Type<A2, C2>;
  403: t.Type<A3, C3>;
  404: t.Type<A4, C4>;
  429: t.Type<A5, C5>;
  500: t.Type<A6, C6>;
};

export function getProfileDecoder<
  A0 = ProfileData,
  C0 = ProfileData,
  A1 = BadRequest,
  C1 = BadRequest,
  A2 = Unauthorized,
  C2 = Unauthorized,
  A3 = undefined,
  C3 = undefined,
  A4 = ProblemJson,
  C4 = ProblemJson,
  A5 = undefined,
  C5 = undefined,
  A6 = InternalServerError,
  C6 = InternalServerError
>(
  overrideTypes:
    | Partial<
        GetProfileResponsesT<
          A0,
          C0,
          A1,
          C1,
          A2,
          C2,
          A3,
          C3,
          A4,
          C4,
          A5,
          C5,
          A6,
          C6
        >
      >
    | t.Type<A0, C0>
    | undefined = {}
): r.ResponseDecoder<
  | r.IResponseType<200, A0, never>
  | r.IResponseType<400, A1, never>
  | r.IResponseType<401, A2, never>
  | r.IResponseType<403, A3, never>
  | r.IResponseType<404, A4, never>
  | r.IResponseType<429, A5, never>
  | r.IResponseType<500, A6, never>
> {
  const isDecoder = (d: any): d is t.Type<A0, C0> =>
    typeof d["_A"] !== "undefined";

  const type = {
    ...((getProfileDefaultResponses as unknown) as GetProfileResponsesT<
      A0,
      C0,
      A1,
      C1,
      A2,
      C2,
      A3,
      C3,
      A4,
      C4,
      A5,
      C5,
      A6,
      C6
    >),
    ...(isDecoder(overrideTypes) ? { 200: overrideTypes } : overrideTypes)
  };

  const d200 = (type[200].name === "undefined"
    ? r.constantResponseDecoder<undefined, 200, never>(200, undefined)
    : r.ioResponseDecoder<
        200,
        typeof type[200]["_A"],
        typeof type[200]["_O"],
        never
      >(200, type[200])) as r.ResponseDecoder<r.IResponseType<200, A0, never>>;

  const d400 = (type[400].name === "undefined"
    ? r.constantResponseDecoder<undefined, 400, never>(400, undefined)
    : r.ioResponseDecoder<
        400,
        typeof type[400]["_A"],
        typeof type[400]["_O"],
        never
      >(400, type[400])) as r.ResponseDecoder<r.IResponseType<400, A1, never>>;

  const d401 = (type[401].name === "undefined"
    ? r.constantResponseDecoder<undefined, 401, never>(401, undefined)
    : r.ioResponseDecoder<
        401,
        typeof type[401]["_A"],
        typeof type[401]["_O"],
        never
      >(401, type[401])) as r.ResponseDecoder<r.IResponseType<401, A2, never>>;

  const d403 = (type[403].name === "undefined"
    ? r.constantResponseDecoder<undefined, 403, never>(403, undefined)
    : r.ioResponseDecoder<
        403,
        typeof type[403]["_A"],
        typeof type[403]["_O"],
        never
      >(403, type[403])) as r.ResponseDecoder<r.IResponseType<403, A3, never>>;

  const d404 = (type[404].name === "undefined"
    ? r.constantResponseDecoder<undefined, 404, never>(404, undefined)
    : r.ioResponseDecoder<
        404,
        typeof type[404]["_A"],
        typeof type[404]["_O"],
        never
      >(404, type[404])) as r.ResponseDecoder<r.IResponseType<404, A4, never>>;

  const d429 = (type[429].name === "undefined"
    ? r.constantResponseDecoder<undefined, 429, never>(429, undefined)
    : r.ioResponseDecoder<
        429,
        typeof type[429]["_A"],
        typeof type[429]["_O"],
        never
      >(429, type[429])) as r.ResponseDecoder<r.IResponseType<429, A5, never>>;

  const d500 = (type[500].name === "undefined"
    ? r.constantResponseDecoder<undefined, 500, never>(500, undefined)
    : r.ioResponseDecoder<
        500,
        typeof type[500]["_A"],
        typeof type[500]["_O"],
        never
      >(500, type[500])) as r.ResponseDecoder<r.IResponseType<500, A6, never>>;

  return r.composeResponseDecoders(
    r.composeResponseDecoders(
      r.composeResponseDecoders(
        r.composeResponseDecoders(
          r.composeResponseDecoders(
            r.composeResponseDecoders(d200, d400),
            d401
          ),
          d403
        ),
        d404
      ),
      d429
    ),
    d500
  );
}

// Decodes the success response with the type defined in the specs
export const getProfileDefaultDecoder = () => getProfileDecoder();

/****************************************************************
 * getUserSessionState
 */

// Request type definition
export type GetUserSessionStateT = r.IGetApiRequestType<
  { readonly bearerAuth: string },
  "Authorization",
  never,
  | r.IResponseType<200, SessionState, never>
  | r.IResponseType<400, BadRequest, never>
  | r.IResponseType<401, Unauthorized, never>
  | r.IResponseType<403, undefined, never>
  | r.IResponseType<500, InternalServerError, never>
  | r.IResponseType<502, undefined, never>
  | r.IResponseType<504, undefined, never>
>;

export const getUserSessionStateDefaultResponses = {
  200: SessionState,
  400: BadRequest,
  401: Unauthorized,
  403: t.undefined,
  500: InternalServerError,
  502: t.undefined,
  504: t.undefined
};

export type GetUserSessionStateResponsesT<
  A0 = SessionState,
  C0 = SessionState,
  A1 = BadRequest,
  C1 = BadRequest,
  A2 = Unauthorized,
  C2 = Unauthorized,
  A3 = undefined,
  C3 = undefined,
  A4 = InternalServerError,
  C4 = InternalServerError,
  A5 = undefined,
  C5 = undefined,
  A6 = undefined,
  C6 = undefined
> = {
  200: t.Type<A0, C0>;
  400: t.Type<A1, C1>;
  401: t.Type<A2, C2>;
  403: t.Type<A3, C3>;
  500: t.Type<A4, C4>;
  502: t.Type<A5, C5>;
  504: t.Type<A6, C6>;
};

export function getUserSessionStateDecoder<
  A0 = SessionState,
  C0 = SessionState,
  A1 = BadRequest,
  C1 = BadRequest,
  A2 = Unauthorized,
  C2 = Unauthorized,
  A3 = undefined,
  C3 = undefined,
  A4 = InternalServerError,
  C4 = InternalServerError,
  A5 = undefined,
  C5 = undefined,
  A6 = undefined,
  C6 = undefined
>(
  overrideTypes:
    | Partial<
        GetUserSessionStateResponsesT<
          A0,
          C0,
          A1,
          C1,
          A2,
          C2,
          A3,
          C3,
          A4,
          C4,
          A5,
          C5,
          A6,
          C6
        >
      >
    | t.Type<A0, C0>
    | undefined = {}
): r.ResponseDecoder<
  | r.IResponseType<200, A0, never>
  | r.IResponseType<400, A1, never>
  | r.IResponseType<401, A2, never>
  | r.IResponseType<403, A3, never>
  | r.IResponseType<500, A4, never>
  | r.IResponseType<502, A5, never>
  | r.IResponseType<504, A6, never>
> {
  const isDecoder = (d: any): d is t.Type<A0, C0> =>
    typeof d["_A"] !== "undefined";

  const type = {
    ...((getUserSessionStateDefaultResponses as unknown) as GetUserSessionStateResponsesT<
      A0,
      C0,
      A1,
      C1,
      A2,
      C2,
      A3,
      C3,
      A4,
      C4,
      A5,
      C5,
      A6,
      C6
    >),
    ...(isDecoder(overrideTypes) ? { 200: overrideTypes } : overrideTypes)
  };

  const d200 = (type[200].name === "undefined"
    ? r.constantResponseDecoder<undefined, 200, never>(200, undefined)
    : r.ioResponseDecoder<
        200,
        typeof type[200]["_A"],
        typeof type[200]["_O"],
        never
      >(200, type[200])) as r.ResponseDecoder<r.IResponseType<200, A0, never>>;

  const d400 = (type[400].name === "undefined"
    ? r.constantResponseDecoder<undefined, 400, never>(400, undefined)
    : r.ioResponseDecoder<
        400,
        typeof type[400]["_A"],
        typeof type[400]["_O"],
        never
      >(400, type[400])) as r.ResponseDecoder<r.IResponseType<400, A1, never>>;

  const d401 = (type[401].name === "undefined"
    ? r.constantResponseDecoder<undefined, 401, never>(401, undefined)
    : r.ioResponseDecoder<
        401,
        typeof type[401]["_A"],
        typeof type[401]["_O"],
        never
      >(401, type[401])) as r.ResponseDecoder<r.IResponseType<401, A2, never>>;

  const d403 = (type[403].name === "undefined"
    ? r.constantResponseDecoder<undefined, 403, never>(403, undefined)
    : r.ioResponseDecoder<
        403,
        typeof type[403]["_A"],
        typeof type[403]["_O"],
        never
      >(403, type[403])) as r.ResponseDecoder<r.IResponseType<403, A3, never>>;

  const d500 = (type[500].name === "undefined"
    ? r.constantResponseDecoder<undefined, 500, never>(500, undefined)
    : r.ioResponseDecoder<
        500,
        typeof type[500]["_A"],
        typeof type[500]["_O"],
        never
      >(500, type[500])) as r.ResponseDecoder<r.IResponseType<500, A4, never>>;

  const d502 = (type[502].name === "undefined"
    ? r.constantResponseDecoder<undefined, 502, never>(502, undefined)
    : r.ioResponseDecoder<
        502,
        typeof type[502]["_A"],
        typeof type[502]["_O"],
        never
      >(502, type[502])) as r.ResponseDecoder<r.IResponseType<502, A5, never>>;

  const d504 = (type[504].name === "undefined"
    ? r.constantResponseDecoder<undefined, 504, never>(504, undefined)
    : r.ioResponseDecoder<
        504,
        typeof type[504]["_A"],
        typeof type[504]["_O"],
        never
      >(504, type[504])) as r.ResponseDecoder<r.IResponseType<504, A6, never>>;

  return r.composeResponseDecoders(
    r.composeResponseDecoders(
      r.composeResponseDecoders(
        r.composeResponseDecoders(
          r.composeResponseDecoders(
            r.composeResponseDecoders(d200, d400),
            d401
          ),
          d403
        ),
        d500
      ),
      d502
    ),
    d504
  );
}

// Decodes the success response with the type defined in the specs
export const getUserSessionStateDefaultDecoder = () =>
  getUserSessionStateDecoder();

/****************************************************************
 * exchangeToken
 */

// Request type definition
export type ExchangeTokenT = r.IPostApiRequestType<
  { readonly bearerAuth: string },
  "Authorization",
  never,
  | r.IResponseType<200, ExchangeToken, never>
  | r.IResponseType<400, BadRequest, never>
  | r.IResponseType<401, Unauthorized, never>
  | r.IResponseType<403, undefined, never>
  | r.IResponseType<500, InternalServerError, never>
  | r.IResponseType<502, undefined, never>
  | r.IResponseType<504, undefined, never>
>;

export const exchangeTokenDefaultResponses = {
  200: ExchangeToken,
  400: BadRequest,
  401: Unauthorized,
  403: t.undefined,
  500: InternalServerError,
  502: t.undefined,
  504: t.undefined
};

export type ExchangeTokenResponsesT<
  A0 = ExchangeToken,
  C0 = ExchangeToken,
  A1 = BadRequest,
  C1 = BadRequest,
  A2 = Unauthorized,
  C2 = Unauthorized,
  A3 = undefined,
  C3 = undefined,
  A4 = InternalServerError,
  C4 = InternalServerError,
  A5 = undefined,
  C5 = undefined,
  A6 = undefined,
  C6 = undefined
> = {
  200: t.Type<A0, C0>;
  400: t.Type<A1, C1>;
  401: t.Type<A2, C2>;
  403: t.Type<A3, C3>;
  500: t.Type<A4, C4>;
  502: t.Type<A5, C5>;
  504: t.Type<A6, C6>;
};

export function exchangeTokenDecoder<
  A0 = ExchangeToken,
  C0 = ExchangeToken,
  A1 = BadRequest,
  C1 = BadRequest,
  A2 = Unauthorized,
  C2 = Unauthorized,
  A3 = undefined,
  C3 = undefined,
  A4 = InternalServerError,
  C4 = InternalServerError,
  A5 = undefined,
  C5 = undefined,
  A6 = undefined,
  C6 = undefined
>(
  overrideTypes:
    | Partial<
        ExchangeTokenResponsesT<
          A0,
          C0,
          A1,
          C1,
          A2,
          C2,
          A3,
          C3,
          A4,
          C4,
          A5,
          C5,
          A6,
          C6
        >
      >
    | t.Type<A0, C0>
    | undefined = {}
): r.ResponseDecoder<
  | r.IResponseType<200, A0, never>
  | r.IResponseType<400, A1, never>
  | r.IResponseType<401, A2, never>
  | r.IResponseType<403, A3, never>
  | r.IResponseType<500, A4, never>
  | r.IResponseType<502, A5, never>
  | r.IResponseType<504, A6, never>
> {
  const isDecoder = (d: any): d is t.Type<A0, C0> =>
    typeof d["_A"] !== "undefined";

  const type = {
    ...((exchangeTokenDefaultResponses as unknown) as ExchangeTokenResponsesT<
      A0,
      C0,
      A1,
      C1,
      A2,
      C2,
      A3,
      C3,
      A4,
      C4,
      A5,
      C5,
      A6,
      C6
    >),
    ...(isDecoder(overrideTypes) ? { 200: overrideTypes } : overrideTypes)
  };

  const d200 = (type[200].name === "undefined"
    ? r.constantResponseDecoder<undefined, 200, never>(200, undefined)
    : r.ioResponseDecoder<
        200,
        typeof type[200]["_A"],
        typeof type[200]["_O"],
        never
      >(200, type[200])) as r.ResponseDecoder<r.IResponseType<200, A0, never>>;

  const d400 = (type[400].name === "undefined"
    ? r.constantResponseDecoder<undefined, 400, never>(400, undefined)
    : r.ioResponseDecoder<
        400,
        typeof type[400]["_A"],
        typeof type[400]["_O"],
        never
      >(400, type[400])) as r.ResponseDecoder<r.IResponseType<400, A1, never>>;

  const d401 = (type[401].name === "undefined"
    ? r.constantResponseDecoder<undefined, 401, never>(401, undefined)
    : r.ioResponseDecoder<
        401,
        typeof type[401]["_A"],
        typeof type[401]["_O"],
        never
      >(401, type[401])) as r.ResponseDecoder<r.IResponseType<401, A2, never>>;

  const d403 = (type[403].name === "undefined"
    ? r.constantResponseDecoder<undefined, 403, never>(403, undefined)
    : r.ioResponseDecoder<
        403,
        typeof type[403]["_A"],
        typeof type[403]["_O"],
        never
      >(403, type[403])) as r.ResponseDecoder<r.IResponseType<403, A3, never>>;

  const d500 = (type[500].name === "undefined"
    ? r.constantResponseDecoder<undefined, 500, never>(500, undefined)
    : r.ioResponseDecoder<
        500,
        typeof type[500]["_A"],
        typeof type[500]["_O"],
        never
      >(500, type[500])) as r.ResponseDecoder<r.IResponseType<500, A4, never>>;

  const d502 = (type[502].name === "undefined"
    ? r.constantResponseDecoder<undefined, 502, never>(502, undefined)
    : r.ioResponseDecoder<
        502,
        typeof type[502]["_A"],
        typeof type[502]["_O"],
        never
      >(502, type[502])) as r.ResponseDecoder<r.IResponseType<502, A5, never>>;

  const d504 = (type[504].name === "undefined"
    ? r.constantResponseDecoder<undefined, 504, never>(504, undefined)
    : r.ioResponseDecoder<
        504,
        typeof type[504]["_A"],
        typeof type[504]["_O"],
        never
      >(504, type[504])) as r.ResponseDecoder<r.IResponseType<504, A6, never>>;

  return r.composeResponseDecoders(
    r.composeResponseDecoders(
      r.composeResponseDecoders(
        r.composeResponseDecoders(
          r.composeResponseDecoders(
            r.composeResponseDecoders(d200, d400),
            d401
          ),
          d403
        ),
        d500
      ),
      d502
    ),
    d504
  );
}

// Decodes the success response with the type defined in the specs
export const exchangeTokenDefaultDecoder = () => exchangeTokenDecoder();
